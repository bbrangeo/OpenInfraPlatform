/*! \verbatim
*  \copyright	Copyright (c) 2014 Julian Amann. All rights reserved.
*  \date		2014-03-05 19:30
*  \author		Julian Amann <julian.amann@tum.de> (https://www.cms.bgu.tum.de/en/team/amann)
*  \brief		This file is part of the BlueFramework.
*  \endverbatim
*/


#pragma once
#include <vector>
#include <map>
#include <sstream>
#include <string>
#include "../../model/shared_ptr.h"
#include "../../model/IfcTunnelObject.h"

namespace OpenInfraPlatform
{
	namespace IfcTunnel
	{
		// TYPE IfcDerivedUnitEnum = ENUMERATION OF	(ANGULARVELOCITYUNIT	,AREADENSITYUNIT	,COMPOUNDPLANEANGLEUNIT	,DYNAMICVISCOSITYUNIT	,HEATFLUXDENSITYUNIT	,INTEGERCOUNTRATEUNIT	,ISOTHERMALMOISTURECAPACITYUNIT	,KINEMATICVISCOSITYUNIT	,LINEARVELOCITYUNIT	,MASSDENSITYUNIT	,MASSFLOWRATEUNIT	,MOISTUREDIFFUSIVITYUNIT	,MOLECULARWEIGHTUNIT	,SPECIFICHEATCAPACITYUNIT	,THERMALADMITTANCEUNIT	,THERMALCONDUCTANCEUNIT	,THERMALRESISTANCEUNIT	,THERMALTRANSMITTANCEUNIT	,VAPORPERMEABILITYUNIT	,VOLUMETRICFLOWRATEUNIT	,ROTATIONALFREQUENCYUNIT	,TORQUEUNIT	,MOMENTOFINERTIAUNIT	,LINEARMOMENTUNIT	,LINEARFORCEUNIT	,PLANARFORCEUNIT	,MODULUSOFELASTICITYUNIT	,SHEARMODULUSUNIT	,LINEARSTIFFNESSUNIT	,ROTATIONALSTIFFNESSUNIT	,MODULUSOFSUBGRADEREACTIONUNIT	,ACCELERATIONUNIT	,CURVATUREUNIT	,HEATINGVALUEUNIT	,IONCONCENTRATIONUNIT	,LUMINOUSINTENSITYDISTRIBUTIONUNIT	,MASSPERLENGTHUNIT	,MODULUSOFLINEARSUBGRADEREACTIONUNIT	,MODULUSOFROTATIONALSUBGRADEREACTIONUNIT	,PHUNIT	,ROTATIONALMASSUNIT	,SECTIONAREAINTEGRALUNIT	,SECTIONMODULUSUNIT	,SOUNDPOWERLEVELUNIT	,SOUNDPOWERUNIT	,SOUNDPRESSURELEVELUNIT	,SOUNDPRESSUREUNIT	,TEMPERATUREGRADIENTUNIT	,TEMPERATURERATEOFCHANGEUNIT	,THERMALEXPANSIONCOEFFICIENTUNIT	,WARPINGCONSTANTUNIT	,WARPINGMOMENTUNIT	,USERDEFINED);
		class IfcDerivedUnitEnum : public IfcTunnelAbstractEnum, public IfcTunnelType
		{
		public:
			enum IfcDerivedUnitEnumEnum
			{
				ENUM_ANGULARVELOCITYUNIT,
				ENUM_AREADENSITYUNIT,
				ENUM_COMPOUNDPLANEANGLEUNIT,
				ENUM_DYNAMICVISCOSITYUNIT,
				ENUM_HEATFLUXDENSITYUNIT,
				ENUM_INTEGERCOUNTRATEUNIT,
				ENUM_ISOTHERMALMOISTURECAPACITYUNIT,
				ENUM_KINEMATICVISCOSITYUNIT,
				ENUM_LINEARVELOCITYUNIT,
				ENUM_MASSDENSITYUNIT,
				ENUM_MASSFLOWRATEUNIT,
				ENUM_MOISTUREDIFFUSIVITYUNIT,
				ENUM_MOLECULARWEIGHTUNIT,
				ENUM_SPECIFICHEATCAPACITYUNIT,
				ENUM_THERMALADMITTANCEUNIT,
				ENUM_THERMALCONDUCTANCEUNIT,
				ENUM_THERMALRESISTANCEUNIT,
				ENUM_THERMALTRANSMITTANCEUNIT,
				ENUM_VAPORPERMEABILITYUNIT,
				ENUM_VOLUMETRICFLOWRATEUNIT,
				ENUM_ROTATIONALFREQUENCYUNIT,
				ENUM_TORQUEUNIT,
				ENUM_MOMENTOFINERTIAUNIT,
				ENUM_LINEARMOMENTUNIT,
				ENUM_LINEARFORCEUNIT,
				ENUM_PLANARFORCEUNIT,
				ENUM_MODULUSOFELASTICITYUNIT,
				ENUM_SHEARMODULUSUNIT,
				ENUM_LINEARSTIFFNESSUNIT,
				ENUM_ROTATIONALSTIFFNESSUNIT,
				ENUM_MODULUSOFSUBGRADEREACTIONUNIT,
				ENUM_ACCELERATIONUNIT,
				ENUM_CURVATUREUNIT,
				ENUM_HEATINGVALUEUNIT,
				ENUM_IONCONCENTRATIONUNIT,
				ENUM_LUMINOUSINTENSITYDISTRIBUTIONUNIT,
				ENUM_MASSPERLENGTHUNIT,
				ENUM_MODULUSOFLINEARSUBGRADEREACTIONUNIT,
				ENUM_MODULUSOFROTATIONALSUBGRADEREACTIONUNIT,
				ENUM_PHUNIT,
				ENUM_ROTATIONALMASSUNIT,
				ENUM_SECTIONAREAINTEGRALUNIT,
				ENUM_SECTIONMODULUSUNIT,
				ENUM_SOUNDPOWERLEVELUNIT,
				ENUM_SOUNDPOWERUNIT,
				ENUM_SOUNDPRESSURELEVELUNIT,
				ENUM_SOUNDPRESSUREUNIT,
				ENUM_TEMPERATUREGRADIENTUNIT,
				ENUM_TEMPERATURERATEOFCHANGEUNIT,
				ENUM_THERMALEXPANSIONCOEFFICIENTUNIT,
				ENUM_WARPINGCONSTANTUNIT,
				ENUM_WARPINGMOMENTUNIT,
				ENUM_USERDEFINED
			};

			IfcDerivedUnitEnum();
			IfcDerivedUnitEnum( IfcDerivedUnitEnumEnum e ) { m_enum = e; }
			~IfcDerivedUnitEnum();
			virtual const char* classname() const { return "IfcDerivedUnitEnum"; }
			virtual void getStepParameter( std::stringstream& stream, bool is_select_type = false ) const;
			static shared_ptr<IfcDerivedUnitEnum> readStepData( std::string& arg );
			IfcDerivedUnitEnumEnum m_enum;
		};
	} // end namespace IfcTunnel
} // end namespace OpenInfraPlatform

